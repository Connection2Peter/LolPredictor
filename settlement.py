# -*- coding: utf-8 -*-
"""lol.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IfCsotjWaMx36f90cRTQ1f-3j35QGYRS
"""

!wget https://raw.githubusercontent.com/Connection2Peter/getRiotAPI/main/sampleOutput/2022-07-09_19-45-06_Matches_Ironmin136.csv

import csv
import numpy as np
from scipy import stats

pathData = "2022-07-09_19-45-06_Matches_Ironmin136.csv"
rawMatches = []

with open(pathData, newline='') as csvfile:
  rows = csv.reader(csvfile)

  for row in rows:
    rawMatches.append(row)

rawMatches = rawMatches[1:]

print(np.shape(rawMatches))

mode = stats.mode(np.array([len(i) for i in rawMatches]))

raw_X_train, raw_y_train = [], []

for i in rawMatches:
  if len(i) == mode[0]:
    t = []

    for j in i:
      if j == "True":
        t.append(1.0)
      elif j == "False":
        t.append(0.0)
      elif j == "NULL":
        t.append(0.0)
      else:
        t.append(j)

    raw_X_train.append(t[14:])
    raw_y_train.append(t[13])

raw_X_train = np.array(raw_X_train)
raw_y_train = np.array(raw_y_train)

print(np.shape(raw_X_train))
print(np.shape(raw_y_train))
raw_X_train[0]

from keras.utils.np_utils import to_categorical
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

sc = MinMaxScaler(feature_range = (0, 1))
raw_X_train = sc.fit_transform(raw_X_train)
raw_y_train = to_categorical(raw_y_train)

X_train, X_test, y_train, y_test = train_test_split(raw_X_train, raw_y_train, train_size= 0.8, random_state=87)

print(np.shape(X_train))
print(np.shape(X_test))
print(np.shape(y_train))
print(np.shape(y_test))

import tensorflow as tf
from tensorflow.keras.models import Model, load_model
from tensorflow.keras import layers
from tensorflow.keras import optimizers
from sklearn.metrics import classification_report

model = tf.keras.models.Sequential(name = "Model")

model.add(tf.keras.Input(shape=(len(X_train[0]),)))
model.add(layers.Dense(128,"relu"))
model.add(layers.Dense(64,"relu"))
model.add(layers.Dense(16,"relu"))
model.add(layers.Dense(2,"softmax"))

model.summary()

model.compile(
  optimizer='adam',
  loss=tf.keras.losses.CategoricalCrossentropy(),
  metrics=['acc']
)

model.fit(X_train, y_train, epochs=30, batch_size=20, validation_split= 0.2)

model.evaluate(X_test, y_test)